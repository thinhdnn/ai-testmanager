import { Page, expect } from '@playwright/test';

/**
 * {{name}} {{type}} fixture
 * {{#if description}}
 * {{description}}
 * {{/if}}
 */

{{!-- ===== TYPE: EXTEND (auto-run logic when fixture injected) ===== --}}
{{#if (eq type "extend")}}
export const {{exportName}}Fixture = {
  {{exportName}}: async ({ page }: { page: Page }, use) => {
    {{{content}}}
    await use(true);
  }
};

{{!-- ===== TYPE: EXTENDPAGE (inject page after setup) ===== --}}
{{else if (eq type "extendPage")}}
export const {{exportName}}Fixture = {
  {{exportName}}: async ({ page }: { page: Page }, use) => {
    async function setup(): Promise<void> {
      {{{content}}}
    }

    await setup();
    await use(page);
  }
};

{{!-- ===== TYPE: INLINE (manual function call) ===== --}}
{{else if (eq type "inline")}}
export async function {{exportName}}(page: Page): Promise<void> {
  {{{content}}}
}

{{!-- ===== TYPE: INLINEEXTEND (combines inline function with extend pattern) ===== --}}
{{else if (eq type "inlineExtend")}}
export async function {{exportName}}(page: Page): Promise<void> {
  {{{content}}}
}

export const {{exportName}}Fixture = {
  {{exportName}}: async ({}, use) => {
    await use({{exportName}});
  }
};

{{!-- ===== DEFAULT (fallback) ===== --}}
{{else}}
// No valid type provided
console.warn("Unsupported fixture type: '{{type}}'");
{{/if}}

export { expect };
